class Solution:
    # @param {integer[]} nums
    # @param {integer} target
    # @return {integer}
    def threeSumClosest(self, nums, target):
        length = len(nums)
        nums.sort()

        if length > 2:
            ref = abs(nums[0] + nums[1] + nums[2] - target)
            num1 = nums[0]
            num2 = nums[1]
            num3 = nums[2]
            for i in range(length):
                if ref == 0:
                    break
                front = i + 1
                back = length - 1
                while(back > front):
                    gap = nums[i] + nums[front] + nums[back] - target
                    if abs(gap) < ref:
                        num1 = nums[i]
                        num2 = nums[front]
                        num3 = nums[back]
                        ref = abs(gap)
                    if gap > 0:
                        back -= 1
                    elif gap < 0:
                        front += 1
                    else:
                        break
        result = num1 + num2 + num3
        print "ref = %s" % ref
        return result

if __name__=='__main__':
    from time import clock
    start = clock()
    #for i in range(1000000):
        #test()
    s = Solution()        
    s.threeSumClosest([82,-16,-60,-48,32,-30,0,-89,70,-46,-82,-58,66,41,-96,-55,-49,-87,-33,-65,9,14,81,-11,80,-93,79,-63,-61,-16,22,-31,75,12,17,-6,37,-2,-89,-66,3,-95,-74,58,-95,22,11,-20,-36,60,-75,46,-52,-61,-28,7,-50,-45,93,-91,-43,35,-99,-39,53,-54,-98,-4,13,-90,23,-4,-65,29,85,-76,-64,81,32,-97,51,12,-82,-31,81,-2,-83,-9,89,-37,-23,-66,-91,-15,-98,-74,94,30,-2,-70,13,19,-77,-42,33,-70,25,77,47,-70,-70,60,-63,-4,83,13,-78,-23,28,-86,-11,-16,-57,-84,51,-48,-63,-15,29,56,-25,73,-69,23,28,90,96,41,65,-22,-43,-68,-77,31,69,-84,23,-63,-18,20,-93,-17,-48,-73,14,-95,98,-64,-12,-45,14,7,51,-61,89,-48,-23,2,-56,84,-2,27,74,-39,-18,-65,79,-36,-76,-30,44,78,-76,37,88,0,32,55,-51,23,-9,68,26,15,66,66,-56,-42,56,28,33,-32,-23,-36,-12,-76,-12,42,12,40,69,54,82,-22,-7,46,-46], 270)
    #s.threeSumClosest([-21,7,-38,-13,15,30,-70,-48,-89,-11,-88,-92,-44,35,100,-86,42,41,-44,-94,-82,6,10,-61,78,35,99,24,-20,-81,76,-73,-92,-30,0,-95,46,99,20,-89,99,95,-83,-5,43,55,85,-70,73,10,90,87,71,24,78,-54,-35,4,33,52,-28,28,-66,-88,-29,-44,35,-54,-83,63,-90,-68,-31,-7,48,7,-99,-21,-99,-35,39,-12,77,-79,76,85,24,89,90,-86,88,81,94,82,43,-52,63,-55,-96,64,7,-2,32,-18,-19,25,63,-24,-40,81,-22,-30,62,90,-50,-95,33,20,19,87,-9,77,-50,61,-73,-4,-40,12,51,25,-21,91,-48,-86,-82,-38,15,-96,48,-20,-30,82,24,5,-61,8,-49,69,41,97,24,-46,-49,-71,30,84,48,97,91,-80,-65,32,52,-76,87,-82,-40,15,-35,-51,-76,92,31,-61,-22,-5,94,-66,3,-4,46,32,-13,40,-66,-13], -155)
    #s.threeSumClosest([-1,2,1,-4], 1)
    finish = clock()
    print (finish - start) * 1000
